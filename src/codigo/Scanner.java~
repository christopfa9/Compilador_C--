/* The following code was generated by JFlex 1.4.3 on 13/11/24, 1:19 a. m. */

/* Sección de código de usuario */
package compiler;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/11/24, 1:19 a. m. from the specification file
 * <tt>src/codigo/Lexer.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 6;
  public static final int COMMENT_BLOCK = 8;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\53\1\46"+
    "\2\0\1\51\1\56\1\47\1\51\1\51\1\45\1\50\1\51\1\13"+
    "\1\11\1\44\1\6\7\5\2\5\1\51\1\51\1\54\1\52\1\55"+
    "\2\0\4\10\1\12\1\10\21\4\1\7\2\4\1\51\1\0\1\51"+
    "\1\53\1\4\1\0\1\14\1\20\1\24\1\31\1\22\1\32\1\36"+
    "\1\26\1\30\1\4\1\23\1\33\1\34\1\27\1\17\1\42\1\4"+
    "\1\21\1\25\1\16\1\15\1\43\1\40\1\35\1\41\1\37\1\51"+
    "\1\57\1\51\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\2\4\2\5\17\3\2\5"+
    "\1\6\1\7\5\5\2\10\1\11\1\10\1\7\2\12"+
    "\1\13\1\12\1\6\2\14\33\2\2\0\17\3\2\15"+
    "\6\3\1\16\1\17\1\16\1\17\1\16\1\17\1\20"+
    "\1\21\30\3\1\0\16\3\1\20\1\0\11\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\360"+
    "\0\u0150\0\u0180\0\u01b0\0\360\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\360\0\360"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\360"+
    "\0\u0690\0\u0630\0\u06c0\0\u06f0\0\360\0\u0720\0\u06c0\0\u0750"+
    "\0\360\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0150\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\360\0\360\0\u0630"+
    "\0\u0630\0\u06c0\0\u06c0\0\u0c30\0\u07e0\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\12\1\13\2\11\1\14"+
    "\1\11\1\15\1\16\1\17\1\20\1\11\1\21\1\22"+
    "\1\23\1\11\1\24\1\25\2\11\1\26\1\27\1\30"+
    "\1\31\2\11\1\32\1\11\1\33\2\11\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\14\2\36\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\41\46\1\51\1\46"+
    "\1\37\1\52\10\46\1\53\1\54\1\55\41\53\1\56"+
    "\1\53\1\57\1\40\10\53\1\10\1\60\1\61\1\10"+
    "\1\62\1\63\1\64\2\62\1\10\1\62\1\65\1\66"+
    "\1\67\1\70\1\62\1\71\1\72\1\73\1\62\1\74"+
    "\1\75\2\62\1\76\1\77\1\100\1\101\2\62\1\102"+
    "\1\62\1\103\2\62\1\104\1\105\1\106\2\10\1\107"+
    "\1\10\2\106\1\110\1\111\1\112\1\113\1\10\1\7"+
    "\2\10\1\62\1\63\1\64\2\62\1\10\1\62\1\65"+
    "\1\66\1\67\1\70\1\62\1\71\1\72\1\73\1\62"+
    "\1\74\1\75\2\62\1\76\1\77\1\100\1\101\2\62"+
    "\1\102\1\62\1\103\2\62\1\104\1\105\1\114\2\10"+
    "\1\107\1\10\2\106\1\110\1\111\1\112\1\113\62\0"+
    "\1\10\61\0\5\11\1\0\1\11\1\0\30\11\21\0"+
    "\2\12\2\0\1\115\53\0\2\12\1\116\1\0\1\115"+
    "\23\0\1\116\35\0\1\14\36\0\1\14\2\0\1\14"+
    "\6\0\5\11\1\0\1\11\1\0\1\11\1\117\26\11"+
    "\20\0\5\11\1\0\1\11\1\0\13\11\1\120\14\11"+
    "\20\0\5\11\1\0\1\11\1\0\25\11\1\121\2\11"+
    "\20\0\5\11\1\0\1\11\1\0\5\11\1\122\22\11"+
    "\20\0\5\11\1\0\1\11\1\0\6\11\1\123\21\11"+
    "\20\0\5\11\1\0\1\11\1\0\13\11\1\124\3\11"+
    "\1\125\1\11\1\126\6\11\20\0\5\11\1\0\1\11"+
    "\1\0\1\125\2\11\1\127\6\11\1\130\15\11\20\0"+
    "\5\11\1\0\1\11\1\0\2\11\1\131\7\11\1\132"+
    "\1\11\1\133\7\11\1\134\3\11\20\0\5\11\1\0"+
    "\1\11\1\0\13\11\1\135\2\11\1\136\11\11\20\0"+
    "\5\11\1\0\1\11\1\0\3\11\1\137\2\11\1\140"+
    "\21\11\20\0\5\11\1\0\1\11\1\0\3\11\1\141"+
    "\13\11\1\142\10\11\20\0\5\11\1\0\1\11\1\0"+
    "\3\11\1\143\24\11\20\0\5\11\1\0\1\11\1\0"+
    "\3\11\1\117\24\11\20\0\5\11\1\0\1\11\1\0"+
    "\12\11\1\144\15\11\20\0\5\11\1\0\1\11\1\0"+
    "\3\11\1\145\24\11\60\0\1\146\1\147\4\0\1\14"+
    "\57\0\1\14\55\0\1\14\1\0\1\14\57\0\1\14"+
    "\1\0\1\36\55\0\1\14\2\0\1\36\54\0\1\14"+
    "\3\0\1\14\53\0\1\14\4\0\1\14\2\46\1\0"+
    "\43\46\1\0\13\46\1\10\43\46\1\0\13\46\1\0"+
    "\41\46\1\150\1\151\1\0\11\46\2\53\1\0\44\53"+
    "\1\0\12\53\1\10\44\53\1\0\12\53\1\0\41\53"+
    "\1\152\1\153\1\53\1\0\10\53\2\0\1\61\121\0"+
    "\1\61\5\0\1\14\12\0\2\154\56\0\2\155\1\0"+
    "\1\155\1\0\1\155\1\0\1\155\3\0\1\155\1\0"+
    "\1\155\1\0\1\155\4\0\2\155\31\0\5\11\1\0"+
    "\1\11\1\0\2\11\1\156\25\11\20\0\5\11\1\0"+
    "\1\11\1\0\11\11\1\157\2\11\1\160\13\11\20\0"+
    "\5\11\1\0\1\11\1\0\26\11\1\161\1\11\20\0"+
    "\5\11\1\0\1\11\1\0\6\11\1\162\21\11\20\0"+
    "\5\11\1\0\1\11\1\0\2\11\1\163\17\11\1\164"+
    "\5\11\20\0\5\11\1\0\1\11\1\0\1\11\1\165"+
    "\26\11\20\0\5\11\1\0\1\11\1\0\11\11\1\166"+
    "\16\11\20\0\5\11\1\0\1\11\1\0\2\11\1\167"+
    "\25\11\20\0\5\11\1\0\1\11\1\0\13\11\1\170"+
    "\14\11\20\0\5\11\1\0\1\11\1\0\1\141\27\11"+
    "\20\0\5\11\1\0\1\11\1\0\1\171\4\11\1\172"+
    "\22\11\20\0\5\11\1\0\1\11\1\0\3\11\1\173"+
    "\24\11\20\0\5\11\1\0\1\11\1\0\22\11\1\174"+
    "\1\175\4\11\20\0\5\11\1\0\1\11\1\0\14\11"+
    "\1\176\13\11\20\0\5\11\1\0\1\11\1\0\2\11"+
    "\1\136\25\11\20\0\5\11\1\0\1\11\1\0\1\11"+
    "\1\177\26\11\20\0\5\11\1\0\1\11\1\0\16\11"+
    "\1\200\11\11\20\0\5\11\1\0\1\11\1\0\5\11"+
    "\1\136\22\11\20\0\5\11\1\0\1\11\1\0\3\11"+
    "\1\201\24\11\20\0\5\11\1\0\1\11\1\0\13\11"+
    "\1\202\14\11\20\0\5\11\1\0\1\11\1\0\14\11"+
    "\1\203\13\11\20\0\5\11\1\0\1\11\1\0\14\11"+
    "\1\204\2\11\1\205\10\11\21\0\2\154\3\0\1\206"+
    "\7\0\1\206\41\0\5\11\1\0\1\11\1\0\3\11"+
    "\1\136\24\11\20\0\5\11\1\0\1\11\1\0\14\11"+
    "\1\207\13\11\20\0\5\11\1\0\1\11\1\0\3\11"+
    "\1\210\24\11\20\0\5\11\1\0\1\11\1\0\6\11"+
    "\1\211\21\11\20\0\5\11\1\0\1\11\1\0\1\212"+
    "\27\11\20\0\5\11\1\0\1\11\1\0\1\11\1\213"+
    "\26\11\20\0\5\11\1\0\1\11\1\0\14\11\1\214"+
    "\13\11\20\0\5\11\1\0\1\11\1\0\20\11\1\136"+
    "\7\11\20\0\5\11\1\0\1\11\1\0\6\11\1\136"+
    "\21\11\20\0\5\11\1\0\1\11\1\0\6\11\1\213"+
    "\21\11\20\0\5\11\1\0\1\11\1\0\2\11\1\215"+
    "\6\11\1\135\16\11\20\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\216\25\11\20\0\5\11\1\0\1\11\1\0"+
    "\1\11\1\217\26\11\20\0\5\11\1\0\1\11\1\0"+
    "\5\11\1\135\22\11\20\0\5\11\1\0\1\11\1\0"+
    "\13\11\1\220\14\11\20\0\5\11\1\0\1\11\1\0"+
    "\6\11\1\221\21\11\20\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\222\25\11\20\0\5\11\1\0\1\11\1\0"+
    "\4\11\1\203\23\11\20\0\5\11\1\0\1\11\1\0"+
    "\1\223\27\11\20\0\5\11\1\0\1\11\1\0\1\135"+
    "\27\11\20\0\5\11\1\0\1\11\1\0\22\11\1\136"+
    "\5\11\20\0\5\11\1\0\1\11\1\0\17\11\1\166"+
    "\10\11\20\0\5\11\1\0\1\11\1\0\15\11\1\136"+
    "\12\11\20\0\5\11\1\0\1\11\1\0\1\224\27\11"+
    "\21\0\2\225\4\0\1\226\34\0\1\226\13\0\5\11"+
    "\1\0\1\11\1\0\22\11\1\174\5\11\20\0\5\11"+
    "\1\0\1\11\1\0\13\11\1\136\14\11\20\0\5\11"+
    "\1\0\1\11\1\0\15\11\1\227\12\11\20\0\5\11"+
    "\1\0\1\11\1\0\7\11\1\136\20\11\20\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\210\22\11\20\0\5\11"+
    "\1\0\1\11\1\0\11\11\1\230\16\11\20\0\5\11"+
    "\1\0\1\11\1\0\14\11\1\231\13\11\20\0\5\11"+
    "\1\0\1\11\1\0\14\11\1\232\13\11\20\0\5\11"+
    "\1\0\1\11\1\0\10\11\1\135\17\11\20\0\5\11"+
    "\1\0\1\11\1\0\6\11\1\204\21\11\20\0\5\11"+
    "\1\0\1\11\1\0\3\11\1\233\24\11\20\0\5\11"+
    "\1\0\1\11\1\0\10\11\1\234\17\11\20\0\5\11"+
    "\1\0\1\11\1\0\1\11\1\235\26\11\20\0\5\11"+
    "\1\0\1\11\1\0\2\11\1\144\25\11\21\0\2\225"+
    "\55\0\5\11\1\0\1\11\1\0\6\11\1\233\21\11"+
    "\20\0\5\11\1\0\1\11\1\0\2\11\1\236\25\11"+
    "\20\0\5\11\1\0\1\11\1\0\13\11\1\237\14\11"+
    "\20\0\5\11\1\0\1\11\1\0\10\11\1\136\17\11"+
    "\20\0\5\11\1\0\1\11\1\0\16\11\1\136\11\11"+
    "\20\0\5\11\1\0\1\11\1\0\12\11\1\136\15\11"+
    "\20\0\5\11\1\0\1\11\1\0\17\11\1\135\10\11"+
    "\20\0\5\11\1\0\1\11\1\0\6\11\1\141\21\11"+
    "\20\0\5\11\1\0\1\11\1\0\1\11\1\166\26\11"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\3\1\1\11\22\1\2\11"+
    "\7\1\1\11\4\1\1\11\3\1\1\11\33\1\2\0"+
    "\27\1\2\11\36\1\1\0\17\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private HashMap<String, ArrayList<TokenOccurrence>> tokenTable = new HashMap<>();
    private ArrayList<LexicalError> errorList = new ArrayList<>();
    
    private class TokenOccurrence {
        int line;
        int count;
        
        TokenOccurrence(int line) {
            this.line = line;
            this.count = 1;
        }
    }
    
    private class LexicalError {
        String message;
        int line;
        
        LexicalError(String message, int line) {
            this.message = message;
            this.line = line;
        }
    }
    
    private void addToken(String token, String type) {
        String key = token + " " + type;
        ArrayList<TokenOccurrence> occurrences = tokenTable.getOrDefault(key, new ArrayList<>());
        
        // Buscar si ya existe una ocurrencia en esta línea
        boolean found = false;
        for (TokenOccurrence occ : occurrences) {
            if (occ.line == yyline + 1) {
                occ.count++;
                found = true;
                break;
            }
        }
        
        if (!found) {
            occurrences.add(new TokenOccurrence(yyline + 1));
        }
        
        tokenTable.put(key, occurrences);
    }
    
    private void addError(String message) {
        errorList.add(new LexicalError(message, yyline + 1));
    }
    
    public void printReport() {
        System.out.println("\nToken Report:");
        System.out.println("Token\tType\tLines (occurrences)");
        System.out.println("----------------------------------------");
        
        tokenTable.forEach((key, occurrences) -> {
            String[] parts = key.split(" ", 2);
            System.out.print(parts[0] + "\t" + parts[1] + "\t");
            
            for (int i = 0; i < occurrences.size(); i++) {
                TokenOccurrence occ = occurrences.get(i);
                System.out.print(occ.line);
                if (occ.count > 1) {
                    System.out.print("(" + occ.count + ")");
                }
                if (i < occurrences.size() - 1) {
                    System.out.print(", ");
                }
            }
            System.out.println();
        });
        
        System.out.println("\nError Report:");
        System.out.println("Line\tError Message");
        System.out.println("----------------------------------------");
        
        errorList.forEach(error -> 
            System.out.println(error.line + "\t" + error.message)
        );
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { addToken(yytext(), "FLOAT");
          }
        case 18: break;
        case 7: 
          { yybegin(CHAR);
          }
        case 19: break;
        case 2: 
          { /* ignore */
          }
        case 20: break;
        case 1: 
          { addError("Illegal character: " + yytext());
          }
        case 21: break;
        case 17: 
          { addToken(yytext(), "HEXADECIMAL");
          }
        case 22: break;
        case 13: 
          { addToken(yytext(), "KEYWORD");
          }
        case 23: break;
        case 5: 
          { addToken(yytext(), "OPERATOR");
          }
        case 24: break;
        case 15: 
          { yybegin(COMMENT_BLOCK);
          }
        case 25: break;
        case 4: 
          { addToken(yytext(), "INTEGER");
          }
        case 26: break;
        case 3: 
          { addToken(yytext(), "IDENTIFIER");
          }
        case 27: break;
        case 6: 
          { yybegin(STRING);
          }
        case 28: break;
        case 12: 
          { yybegin(YYINITIAL);
          }
        case 29: break;
        case 11: 
          { addError("Unterminated char literal"); yybegin(YYINITIAL);
          }
        case 30: break;
        case 10: 
          { /* acumular char */
          }
        case 31: break;
        case 14: 
          { yybegin(COMMENT_LINE);
          }
        case 32: break;
        case 9: 
          { addError("Unterminated string literal"); yybegin(YYINITIAL);
          }
        case 33: break;
        case 8: 
          { /* acumular string */
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
