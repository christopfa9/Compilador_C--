package codigo;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import codigo.Traductor.Instruccion;
import codigo.Traductor.TipoInstruccion;

parser code {:
    private java.util.List<String> syntaxErrors = new java.util.ArrayList<>();
    private Symbol lastToken = null;
    private List<String> erroresSemanticos = new ArrayList<>();
    private SemanticAnalyzer semanticAnalyzer;
    private TablaSimbolos tablaSimbolos;
    private String ambitoActual = "Global";
    private ArrayList<Instruccion> instrucciones = new ArrayList<>();

    // Inicialización
{
        tablaSimbolos = new TablaSimbolos();
        semanticAnalyzer = new SemanticAnalyzer(tablaSimbolos);
        erroresSemanticos = new ArrayList<>();
        syntaxErrors = new ArrayList<>();
        instrucciones = new ArrayList<>();
        ambitoActual = "Global";
        System.out.println("Parser inicializado correctamente");
    }

    private void addInstruccion(Instruccion instruccion) {
        if (instruccion != null) {
            System.out.println("Agregando instrucción: " + instruccion.getTipo() + " - " + instruccion.getOperandoIzq());
            instrucciones.add(instruccion);
        }
    }

    private void handleDeclaration(Variable var) {
        if (var != null) {
            System.out.println("Manejando declaración de: " + var.getIdentificador());
            if (!tablaSimbolos.existeSimbolo(var)) {
                tablaSimbolos.insertar(var);
                Instruccion inst = new Instruccion(TipoInstruccion.DECLARACION, var.getIdentificador(), null, null, null, var.getFila());
                addInstruccion(inst);
            } else {
                semanticAnalyzer.checkDoubleDefinition(var);
            }
        }
    }

    public List<String> getSyntaxErrors() {
        return syntaxErrors;
    }
    
    public List<String> getSemanticErrors() {
        return semanticAnalyzer != null ? semanticAnalyzer.getErrores() : new ArrayList<>();
    }
    
    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }
    
    public ArrayList<Instruccion> getInstrucciones() {
        return instrucciones;
    }

    private void addError(int line, String message) {
        String error = String.format("Línea %d: Error sintáctico - %s", line, message);
        if (!syntaxErrors.contains(error)) {
            syntaxErrors.add(error);
        }
    }

    public void syntax_error(Symbol s) {
        if (s == null) return;
        int line = s.left;
        if (line <= 0) return; 
        lastToken = s;
    }

    public void unrecovered_syntax_error(Symbol s) {
        if (s != null && s.left > 0) {
            addError(s.left, "Error irrecuperable en la estructura");
        }
    }
:};

/* Terminals */
terminal            PLUS_PLUS, MINUS_MINUS, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIVIDE_ASSIGN;
terminal            EQUALS, GTEQ, GT, LTEQ, LT, NOT_EQUALS, OR, AND, NOT;
terminal            LPAREN, RPAREN, SEMICOLON, LBRACE, RBRACE, COMMA, COLON;
terminal            INT, VOID, CHAR, LONG, SHORT;
terminal String     IDENTIFIER;
terminal Integer    NUMBER;
terminal            IF, ELSE, WHILE, DO, FOR;
terminal            BREAK, CONTINUE, RETURN;
terminal            SWITCH, CASE, DEFAULT;
terminal            READ, WRITE, CONST;
terminal            UMINUS;

/* Non-terminals */
non terminal            program;
non terminal            statement_list;
non terminal            statement;
non terminal            declaration;
non terminal Expression expr;
non terminal Expression arithmetic_expr;
non terminal Expression term;
non terminal Expression primary_expr;
non terminal            logical_expr;
non terminal            rel_expr;
non terminal TipoDato   type;
non terminal            block;
non terminal            if_statement;
non terminal            while_statement;
non terminal            do_while_statement;
non terminal            for_statement;
non terminal List<Variable> var_list;
non terminal Instruccion condition;
non terminal Instruccion rel_cond;
non terminal            unary_expr;

/* Precedences */
precedence left     OR;
precedence left     AND;
precedence left     EQUALS, NOT_EQUALS;
precedence left     LT, GT, LTEQ, GTEQ;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE, MOD;
precedence right    NOT, UMINUS;
precedence left     PLUS_PLUS, MINUS_MINUS;

/* Grammar */
start with program;

program ::= statement_list;

statement_list ::= 
    statement_list statement
    | statement;

statement ::=
    declaration
    | expr:e SEMICOLON 
    {: 
        if (e != null) {
            addInstruccion(new Instruccion(TipoInstruccion.EXPRESION, e.toString(), null, null, null, eleft));
        }
    :}
    | if_statement
    | while_statement
    | do_while_statement
    | for_statement
    | block
    | unary_expr SEMICOLON
    | BREAK SEMICOLON {: semanticAnalyzer.checkLoopControl("break", 0); :}
    | CONTINUE SEMICOLON {: semanticAnalyzer.checkLoopControl("continue", 0); :}
    | error SEMICOLON;

declaration ::= 
    type:t var_list:vl SEMICOLON
    {:
        if (vl != null) {
            System.out.println("Procesando declaración con tipo: " + t + " y " + vl.size() + " variables");
            for (Variable var : vl) {
                var.setTipo(t);
                System.out.println("Declarando variable: " + var.getIdentificador());
                tablaSimbolos.insertar(var);
                Instruccion inst = new Instruccion(TipoInstruccion.DECLARACION, var.getIdentificador(), null, null, null, var.getFila());
                addInstruccion(inst);
            }
        }
    :}
    ;

var_list ::= 
    var_list:vl COMMA IDENTIFIER:id
    {:
        List<Variable> list = vl != null ? vl : new ArrayList<>();
        Variable var = new Variable(id.toString(), null, ambitoActual, idleft, idright);
        System.out.println("Agregando variable a lista: " + id.toString());
        list.add(var);
        RESULT = list;
    :}
    | IDENTIFIER:id
    {:
        List<Variable> list = new ArrayList<>();
        Variable var = new Variable(id.toString(), null, ambitoActual, idleft, idright);
        System.out.println("Creando nueva lista con variable: " + id.toString());
        list.add(var);
        RESULT = list;
    :}
    ;
expr ::= 
    IDENTIFIER:id ASSIGN expr:e
    {:
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        if (!semanticAnalyzer.hasError()) {
            addInstruccion(new Instruccion(TipoInstruccion.ASIGNACION, id, null, e.toString(), null, idleft));
            RESULT = e;
        }
    :}
    | arithmetic_expr:a {: RESULT = a; :};

arithmetic_expr ::= 
    arithmetic_expr:a PLUS term:t
    {: 
        addInstruccion(new Instruccion(TipoInstruccion.OPERACION_ARITMETICA, a.toString(), "+", t.toString(), null, aleft));
        RESULT = semanticAnalyzer.foldConstants(a, "+", t); 
    :}
    | arithmetic_expr:a MINUS term:t
    {: 
        addInstruccion(new Instruccion(TipoInstruccion.OPERACION_ARITMETICA, a.toString(), "-", t.toString(), null, aleft));
        RESULT = semanticAnalyzer.foldConstants(a, "-", t); 
    :}
    | term:t {: RESULT = t; :};

term ::= 
    term:t TIMES primary_expr:p
    {: 
        addInstruccion(new Instruccion(TipoInstruccion.OPERACION_ARITMETICA, t.toString(), "*", p.toString(), null, tleft));
        RESULT = semanticAnalyzer.foldConstants(t, "*", p); 
    :}
    | term:t DIVIDE primary_expr:p
    {: 
        addInstruccion(new Instruccion(TipoInstruccion.OPERACION_ARITMETICA, t.toString(), "/", p.toString(), null, tleft));
        RESULT = semanticAnalyzer.foldConstants(t, "/", p); 
    :}
    | primary_expr:p {: RESULT = p; :};

primary_expr ::= 
    LPAREN expr:e RPAREN {: RESULT = e; :}
    | IDENTIFIER:id
    {: 
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        Expression constValue = semanticAnalyzer.propagateConstants(id, ambitoActual);
        RESULT = constValue != null ? constValue : new Expression(TipoDato.INT);
    :}
    | NUMBER:n {: RESULT = new Expression(TipoDato.INT, n); :}
    | MINUS primary_expr:p {: RESULT = new Expression(TipoDato.INT); :} %prec UMINUS;

if_statement ::=
    IF LPAREN condition:c RPAREN block
    {:
        RESULT = new Instruccion(TipoInstruccion.IF, c.getOperandoIzq(), c.getOperador(), c.getOperandoDer(), null, cleft);
        addInstruccion(RESULT);
    :}
    | IF LPAREN condition:c RPAREN block:b1 ELSE block
    {:
        Instruccion ifInst = new Instruccion(TipoInstruccion.IF, c.getOperandoIzq(), c.getOperador(), c.getOperandoDer(), null, cleft);
        addInstruccion(ifInst);
        addInstruccion(new Instruccion(TipoInstruccion.ELSE, null, null, null, null, cleft));
    :};

while_statement ::=
    WHILE {: tablaSimbolos.enterLoop(); :}
    LPAREN condition:c RPAREN block
    {: 
        tablaSimbolos.exitLoop();
        addInstruccion(new Instruccion(TipoInstruccion.WHILE, c.getOperandoIzq(), c.getOperador(), c.getOperandoDer(), null, cleft));
    :};

condition ::= 
    rel_cond:r {: RESULT = r; :}
    | condition:c1 AND condition:c2 
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, c1.getOperandoIzq(), "&&", c2.getOperandoIzq(), null, c1left); :}
    | condition:c1 OR condition:c2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, c1.getOperandoIzq(), "||", c2.getOperandoIzq(), null, c1left); :}
    | NOT condition:c
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, c.getOperandoIzq(), "!", null, null, cleft); :};

rel_cond ::=
    expr:e1 GT expr:e2 
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), ">", e2.toString(), null, e1left); :}
    | expr:e1 LT expr:e2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), "<", e2.toString(), null, e1left); :}
    | expr:e1 GTEQ expr:e2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), ">=", e2.toString(), null, e1left); :}
    | expr:e1 LTEQ expr:e2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), "<=", e2.toString(), null, e1left); :}
    | expr:e1 EQUALS expr:e2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), "==", e2.toString(), null, e1left); :}
    | expr:e1 NOT_EQUALS expr:e2
    {: RESULT = new Instruccion(TipoInstruccion.CONDITION, e1.toString(), "!=", e2.toString(), null, e1left); :};

block ::= 
    LBRACE 
    {:
        String prevAmbito = ambitoActual;
        ambitoActual = ambitoActual + "_" + lbraceleft;
    :}
    statement_list RBRACE
    {:
        ambitoActual = prevAmbito;
    :};

unary_expr ::=
    PLUS_PLUS IDENTIFIER:id
    {:
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        if (!semanticAnalyzer.hasError()) {
            addInstruccion(new Instruccion(TipoInstruccion.INCREMENTO, id.toString(), null, null, null, idleft));
        }
    :}
    | MINUS_MINUS IDENTIFIER:id
    {:
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        if (!semanticAnalyzer.hasError()) {
            addInstruccion(new Instruccion(TipoInstruccion.DECREMENTO, id.toString(), null, null, null, idleft));
        }
    :};

type ::= 
    INT     {: RESULT = TipoDato.INT; :}
    | CHAR  {: RESULT = TipoDato.CHAR; :}
    | VOID  {: RESULT = null; :};